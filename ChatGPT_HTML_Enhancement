// ==UserScript==
// @name         HTML Previewer for ChatGPT & AICNN & Oaifree
// @version      1.0
// @description  在 chatgpt.com, plus.aicnn.xyz, new.oaifree.com 上预览 HTML 代码，通过在带有 'language-html' 类的代码块下方添加 iframe。还支持下载 HTML 预览，并兼容 Mermaid 图表渲染。
// @author       RoderickZH
// @match        https://chatgpt.com/*
// @match        https://plus.aicnn.xyz/*
// @match        https://plus.aivvm.com/*
// @match        https://new.oaifree.com/*
// @match        https://*.new.oaifree.com/*
// @grant        none
// @license      MIT
// @downloadURL  https://您的下载链接
// @updateURL    https://您的更新链接
// ==/UserScript==

(function() {
    'use strict';

    // 替换 Mermaid 脚本标签的函数
    function replaceMermaidScript(htmlContent) {
        // 定义 Mermaid 脚本标签的正则表达式
        const mermaidScriptRegex = /<script[^>]*src=["']https:\/\/cdn\.jsdelivr\.net\/npm\/mermaid\/dist\/mermaid\.min\.js["'][^>]*><\/script>|<script[^>]*type=["']module["'][^>]*>[^<]*import\s+mermaid[^<]*<\/script>/gi;
        return htmlContent.replace(mermaidScriptRegex, `<script type="module">
            // 导入 Mermaid.js 模块
            import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
            // Mermaid 配置初始化，但不自动渲染
            mermaid.initialize({ startOnLoad: false });

            // 在 DOM 完全加载后手动渲染 Mermaid 图表
            window.addEventListener('DOMContentLoaded', () => {
                mermaid.init(); // 手动渲染 Mermaid 图表
            });
        </script>`);
    }

    // 创建预览容器的函数
    function createPreviewContainer(codeElement, id) {
        // 创建容器 div
        const container = document.createElement('div');
        container.style.border = '1px solid #ddd';
        container.style.borderRadius = '5px';
        container.style.marginTop = '10px';
        container.style.padding = '10px';
        container.style.backgroundColor = '#f9f9f9';
        container.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
        container.style.position = 'relative'; // 确保相对定位
        container.id = 'container-' + id;

        // 创建刷新按钮
        const refreshButton = document.createElement('a');
        refreshButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" style="cursor: pointer;">
                <path d="M17.65 6.35a8 8 0 1 0 2.6 5.65h-2a6 6 0 1 1-1.89-4.23L15 9h6V3l-2.35 2.35z"/>
            </svg>
        `;
        refreshButton.style.position = 'absolute';
        refreshButton.style.top = '5px';
        refreshButton.style.left = '5px';
        refreshButton.style.cursor = 'pointer';

        // 添加刷新按钮的点击事件
        refreshButton.addEventListener('click', function() {
            const iframe = container.querySelector('iframe');
            if (iframe) {
                const doc = iframe.contentDocument || iframe.contentWindow.document;
                // 替换 Mermaid 脚本标签并写入到 iframe
                const processedContent = replaceMermaidScript(codeElement.textContent);
                doc.open();
                doc.write(processedContent);
                doc.close();

                // 更新下载链接
                downloadButton.href = 'data:text/html;charset=utf-8,' + encodeURIComponent(processedContent);
            }
        });

        // 创建 iframe
        const iframe = document.createElement('iframe');
        iframe.className = 'html-preview-iframe';
        iframe.style.width = '100%';
        iframe.style.height = '300px';
        iframe.style.border = 'none';
        iframe.id = 'code-preview-' + id;

        iframe.onload = function() {
            const doc = iframe.contentDocument || iframe.contentWindow.document;
            const processedContent = replaceMermaidScript(codeElement.textContent);
            doc.open();
            doc.write(processedContent);
            doc.close();

            // 引入 Plotly.js 资源，确保正确加载
            const head = doc.head || doc.getElementsByTagName('head')[0];
            const plotlyScript = doc.createElement('script');
            plotlyScript.src = 'https://cdn.plot.ly/plotly-latest.min.js';
            plotlyScript.onload = () => {
                // 等待 Plotly.js 加载完成后再渲染图表
                setTimeout(() => {
                    const plotElements = doc.querySelectorAll('.plotly-graph-div');
                    plotElements.forEach(plot => {
                        if (!plot.data || plot.data.length === 0) {
                            Plotly.redraw(plot); // 手动触发 Plotly 图表重绘
                        }
                    });

                }, 1000); // 设置延时，确保所有资源加载完毕
            };
            head.appendChild(plotlyScript);

            // 使用 MutationObserver 监控内容变化，并动态调整 iframe 高度
            const resizeIframe = () => {
                const contentHeight = doc.documentElement.scrollHeight; // 使用 documentElement 获取高度
                iframe.style.height = contentHeight + 'px'; // 设置 iframe 高度
            };

            // 监听内容变化，并在内容变化时自动调整 iframe 高度
            const observer = new MutationObserver(resizeIframe);
            observer.observe(doc.documentElement, { childList: true, subtree: true, attributes: true, characterData: true });

            // 初始设置高度
            resizeIframe();
        };



        // 创建下载按钮
        const downloadButton = document.createElement('a');
        downloadButton.href = 'data:text/html;charset=utf-8,' + encodeURIComponent(replaceMermaidScript(codeElement.textContent));
        downloadButton.download = 'preview.html';
        downloadButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" style="cursor: pointer;">
                <path d="M12 16l4-5h-3V4h-2v7H8l4 5zm-7 2h14v2H5v-2z"/>
            </svg>
        `;
        downloadButton.style.position = 'absolute';
        downloadButton.style.top = '5px';
        downloadButton.style.right = '5px';
        downloadButton.style.cursor = 'pointer';

        // 将刷新按钮、下载按钮和 iframe 添加到容器中
        container.appendChild(refreshButton);
        container.appendChild(downloadButton);
        container.appendChild(iframe);

        return container;
    }

    // 处理代码元素的函数
    function processCodeElements() {
        // 查找所有带有 'language-html' 类的 code 元素
        const codeElements = document.querySelectorAll('code.language-html');

        // 遍历每个 code 元素
        codeElements.forEach(codeElement => {
            // 检查是否已处理
            if (codeElement.dataset.previewed){
                // 可选：根据需要更新预览，避免频繁删除和添加
                return;
            }

            // 标记为已处理
            codeElement.dataset.previewed = true;

            // 生成唯一 ID
            codeElement.dataset.id = Math.ceil(Math.random() * 100000);

            // 获取 code 块的父元素
            let parentElement = codeElement.closest('.flex-col');

            // 如果在 AICNN 网站上，可能需要不同的父选择器
            if (!parentElement) {
                parentElement = codeElement.closest('.post-content') || codeElement.parentElement;
            }

            // 创建预览容器
            const previewContainer = createPreviewContainer(codeElement, codeElement.dataset.id);

            // 将预览容器插入到 code 元素之后
            if (parentElement) {
                parentElement.appendChild(previewContainer);
            }
        });
    }

    // 初始运行和定时运行处理函数
    processCodeElements();
    setInterval(processCodeElements, 3000);
})();
